Exchange_Rate = fevd_matrix_percent[, "Exchange_Rate"],
Global_Oil_Prices = fevd_matrix_percent[, "Global_Oil_Prices"]
)
row_names
fevd_matrix_percent[, "Unemployment_Rate"]
fevd_matrix_percent
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:10],
Inflation = fevd_matrix_percent[11:20],
Policy_Rate = fevd_matrix_percent[21:30],
Exchange_Rate = fevd_matrix_percent[31:40],
Global_Oil_Prices = fevd_matrix_percent[41:50]
)
table_data
if (length(rownames(fevd_matrix)) == 0) {
row_names <- paste("After", 1:nrow(fevd_matrix),"Month")
} else {
row_names <- rownames(fevd_matrix)
}
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:10],
Inflation = fevd_matrix_percent[11:20],
Policy_Rate = fevd_matrix_percent[21:30],
Exchange_Rate = fevd_matrix_percent[31:40],
Global_Oil_Prices = fevd_matrix_percent[41:50]
)
table_data
fevd_result
fevd_result$CPI
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:10],
Inflation = fevd_matrix_percent[11:20],
Policy_Rate = fevd_matrix_percent[21:30],
Exchange_Rate = fevd_matrix_percent[31:40],
Global_Oil_Prices = fevd_matrix_percent[41:50]
)
table_data
names(table_data)[1] <- ""
knitr::kable(table_data, format = "markdown", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
knitr::kable(table_data, format = "latex", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
table_data
table_data
knitr::kable(table_data, format = "latex", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
table_data
fevd_result <- fevd(svar_estimation, n.ahead = 60)
# Print FEVD
print(fevd_result)
# Plot FEVD
fevd_matrix <- fevd_result$CPI
# Convert percentages to character format
fevd_matrix_percent <- sprintf("%.1f%%", fevd_matrix * 100)
if (length(rownames(fevd_matrix)) == 0) {
row_names <- paste("After", 1:nrow(fevd_matrix),"Month")
} else {
row_names <- rownames(fevd_matrix)
}
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:10],
Inflation = fevd_matrix_percent[11:20],
Policy_Rate = fevd_matrix_percent[21:30],
Exchange_Rate = fevd_matrix_percent[31:40],
Global_Oil_Prices = fevd_matrix_percent[41:50]
)
table_data
names(table_data)[1] <- ""
table_data[c(1,4,12,60),]
table_data <- table_data[c(1,4,12,60),]
table_data %>% t()
table_data %>% t() %>% data.frame()
table_data <- table_data %>% t() %>% data.frame()
table_data[1,]
names(table_data)<-table_data[1,]
table_data
table_data[-1,]
table_data <- table_data[-1,]
knitr::kable(table_data, format = "latex", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
knitr::kable(table_data, format = "latex", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
table_data
knitr::kable(data.frame(table_data), format = "latex", col.names = c("Month", "Unemployment Rate", "Inflation", "Policy Rate", "Exchange Rate", "Global Oil Prices"))
knitr::kable(table_data, format = "latex", col.names = c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years"))
tab <- knitr::kable(table_data, format = "latex", col.names = c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years"))
xtable::print.xtable(tab, file = "fevd_table.tex", include.rownames = FALSE)
getwd()
xtable::print.xtable(tab, file = "../tables/table1.tex", include.rownames = FALSE)
tab
latex_table <- xtable::xtable(tab, align = c("l", "c", "c", "c", "c"))
library(kableExtra)
# Save the table to a LaTeX file with caption
kable(tab, format = "latex", booktabs = TRUE, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1) %>%
kable_styling(latex_options = "scale_down") %>%
save_kable(file = "../tables/table1.tex")
tab
kable(selected_rows, format = "latex", booktabs = TRUE, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1) %>%
kable_styling(latex_options = "scale_down") %>%
save_kable(file = "../tables/table1.tex", latex_header = FALSE, latex_table_environment = FALSE)
kable(tab, format = "latex", booktabs = TRUE, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1) %>%
kable_styling(latex_options = "scale_down") %>%
save_kable(file = "../tables/table1.tex", latex_header = FALSE, latex_table_environment = FALSE)
tab
kable(tab, format = "latex", booktabs = F, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1) %>%
kable_styling(latex_options = "scale_down") %>%
save_kable(file = "../tables/table1.tex", latex_header = FALSE, latex_table_environment = FALSE)
kable(tab, format = "latex", booktabs = F, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1) %>%
kable_styling(latex_options = "scale_down")
kable(tab, format = "latex", booktabs = F, longtable = FALSE, caption = "Forecast error variance decomposition", digits = 1)
kable(tab, format = "latex", booktabs = F, longtable = T, caption = "Forecast error variance decomposition", digits = 2)
# Save the table to a LaTeX file with caption
write.table(tab, "../tables/table1.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
kable(tab, format = "latex", booktabs = F, longtable = T, caption = "Forecast error variance decomposition", digits = 2) %>%
# kable_styling(latex_options = "scale_down") %>%
save_kable(file = "../tables/table1.tex", latex_header = T, latex_table_environment = T)
# Save the table to a LaTeX file with caption
write.table(tab, "../tables/table1.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
fevd_result
fevd_result %>% head()
# Convert percentages to character format
fevd_matrix_percent <- sprintf("%.1f%%", fevd_matrix * 100)
fevd_matrix_percent
if (length(rownames(fevd_matrix)) == 0) {
row_names <- paste("After", 1:nrow(fevd_matrix),"Month")
} else {
row_names <- rownames(fevd_matrix)
}
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:10],
Inflation = fevd_matrix_percent[11:20],
Policy_Rate = fevd_matrix_percent[21:30],
Exchange_Rate = fevd_matrix_percent[31:40],
Global_Oil_Prices = fevd_matrix_percent[41:50]
)
names(table_data)[1] <- ""
table_data <- table_data[c(1,4,12,60),]
table_data
fevd_matrix
fevd_result$CPI
fevd_result$CPI %>% head()
# Plot FEVD
fevd_matrix <- fevd_result$CPI
# Convert percentages to character format
fevd_matrix_percent <- sprintf("%.1f%%", fevd_matrix * 100)
if (length(rownames(fevd_matrix)) == 0) {
row_names <- paste("After", 1:nrow(fevd_matrix),"Month")
} else {
row_names <- rownames(fevd_matrix)
}
rownames(fevd_matrix)
fevd_matrix_percent
fevd_matrix_percent
table_data
fevd_matrix
fevd_matrix_percent
nrows(fevd_matrix)
length(fevd_matrix)
300/60
num_months = 60
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:num_months],
Inflation = fevd_matrix_percent[(num_months + 1):(2 * num_months)],
Policy_Rate = fevd_matrix_percent[(2 * num_months + 1):(3 * num_months)],
Exchange_Rate = fevd_matrix_percent[(3 * num_months + 1):(4 * num_months)],
Global_Oil_Prices = fevd_matrix_percent[(4 * num_months + 1):(5 * num_months)]
)
table_data
names(table_data)[1] <- ""
table_data <- table_data[c(1,4,12,60),]
table_data <- table_data %>% t() %>% data.frame()
names(table_data)<-table_data[1,]
table_data <- table_data[-1,]
table_data
fevd_matrix_percent[(num_months + 1):(2 * num_months)]
table_data
table_data <- data.frame(
Contribution_of = row_names,
Unemployment_Rate = fevd_matrix_percent[1:num_months],
Inflation = fevd_matrix_percent[(num_months + 1):(2 * num_months)],
Policy_Rate = fevd_matrix_percent[(2 * num_months + 1):(3 * num_months)],
Exchange_Rate = fevd_matrix_percent[(3 * num_months + 1):(4 * num_months)],
Global_Oil_Prices = fevd_matrix_percent[(4 * num_months + 1):(5 * num_months)]
)
names(table_data)[1] <- ""
table_data
fevd_matrix_percent <- sprintf("%.1f%%", fevd_matrix * 100)
# Create row names
row_names <- c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years")
# Create a data frame for the table
table_data <- data.frame(
Contribution_of = row_names,
Unemployment = fevd_matrix_percent[, 1],
Inflation = fevd_matrix_percent[, 2],
Policy_Rate = fevd_matrix_percent[, 3],
Exchange_Rate = fevd_matrix_percent[, 4],
Global_Oil_Prices = fevd_matrix_percent[, 5]
)
fevd_result$Inflation
fevd_result <- fevd(svar_estimation, n.ahead = 60)
fevd_result$CPI
source("E:/french inflation/R/data.R")
library(vars)
library(svars)
library(kableExtra)
# Convert date to time series
var_data_time1 <- var_data_time[-6]
# Convert date to time series
var_data_time_ts <- ts(var_data_time1[, -1], start = c(1986, 1), frequency = 12)
# Remove rows with NAs
var_data_time_ts <- na.omit(var_data_time_ts)
# Dynamic specification of the VAR model
optimal_lag <- VARselect(var_data_time_ts, lag.max = 10, type = "both")$selection["AIC(n)"]
var_model <- VAR(var_data_time_ts, p = optimal_lag, type = "both")
# Increase bootstrap repetitions for IRF
irf_result <- irf(svar_estimation, impulse = "Oil_Prices_log_yoy", response = c("CPI", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = TRUE, runs = 1000)
# Create a VAR object
var_model <- VAR(var_data_time_ts, p = 1, type = "both")
# Estimate the SVAR model
svar_estimation <- SVAR(x = var_model, Amat = a, max.iter = 1000,estmethod = "direct")
a <- diag(1, 5)
a[lower.tri(a)] <- NA
# Estimate the SVAR model
svar_estimation <- SVAR(x = var_model, Amat = a, max.iter = 1000,estmethod = "direct")
# Dynamic specification of the VAR model
optimal_lag <- VARselect(var_data_time_ts, lag.max = 10, type = "both")$selection["AIC(n)"]
var_model <- VAR(var_data_time_ts, p = optimal_lag, type = "both")
# Increase bootstrap repetitions for IRF
irf_result <- irf(svar_estimation, impulse = "Oil_Prices_log_yoy", response = c("CPI", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = TRUE, runs = 1000)
# Enhanced diagnostic checks
serial_test <- serial.test(var_model, lags.pt = optimal_lag, type = "Portmanteau")
irf_result
# Enhanced diagnostic checks
serial_test <- serial.test(var_model, lags.pt = optimal_lag, type = "Portmanteau")
?serial.test
# Enhanced diagnostic checks
serial_test <- serial.test(var_model, lags.pt = optimal_lag, type = "BG")
print(serial_test)
# Enhanced visualization
ggplot(irf_df_long, aes(x = Months, y = Elasticity, color = Variable)) +
geom_line() +
labs(title = "Enhanced Impulse Response Functions",
x = "Months",
y = "Elasticity") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black")
irf_data
# Extract IRF data
irf_data <- irf(svar_estimation, impulse = "CPI", response = c("Oil_Prices_log_yoy", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = FALSE)
# Convert IRF data to data frame
irf_df <- as.data.frame(irf_data$irf)
# Add a column for the time points (months)
irf_df$Months <- seq_len(nrow(irf_df))
# Reshape data for ggplot
irf_df_long <- tidyr::gather(irf_df, key = "Variable", value = "Elasticity", -Months)
# Enhanced visualization
ggplot(irf_df_long, aes(x = Months, y = Elasticity, color = Variable)) +
geom_line() +
labs(title = "Enhanced Impulse Response Functions",
x = "Months",
y = "Elasticity") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black")
# Increase bootstrap repetitions for FEVD
fevd_result <- fevd(svar_estimation, n.ahead = 60, boot = TRUE, runs = 1000)
fevd_result
# Error handling (example)
tryCatch({
# Code that might produce an error
var_model <- VAR(var_data_time_ts, p = optimal_lag, type = "both")
}, error = function(e) {
# Error handling code
cat("Error in VAR model fitting: ", e$message, "\n")
})
var_model
# Extract FEVD results
fevd_matrix <- fevd_result$fevd
# Assuming 'fevd_matrix' is a 3-dimensional array (variables x horizons x response variables)
# Convert it into a long format data frame
fevd_df <- as.data.frame(fevd_matrix, responseName = "Variable")
fevd_matrix
# Extract FEVD results
fevd_matrix <- fevd_result$CPI
fevd_matrix
# Assuming 'fevd_matrix' is a 3-dimensional array (variables x horizons x response variables)
# Convert it into a long format data frame
fevd_df <- as.data.frame(fevd_matrix, responseName = "Variable")
fevd_df
# Add time horizon as a column
fevd_df$Horizon <- rep(1:dim(fevd_matrix)[2], each = dim(fevd_matrix)[1])
# Optional: Convert fractions to percentages
fevd_df <- transform(fevd_df, Contribution = Contribution * 100)
fevd_df
fevd_df %>% head()
fevd_df %>% dim()
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60))
selected_horizons
# Use kable from knitr package to create a table
library(knitr)
kable_output <- kable(selected_horizons, format = "markdown", caption = "FEVD Results at Selected Horizons")
kable_output
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
# Create the LaTeX table
latex_table <- xtable(fevd_df_selected, caption = "FEVD Results", align = "l|llll")
fevd_df_selected <- selected_horizons
# Use kable from knitr package to create a table
library(knitr)
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
# Create the LaTeX table
latex_table <- xtable(fevd_df_selected, caption = "FEVD Results", align = "l|llll")
# Create the LaTeX table
latex_table <- xtable::xtable(fevd_df_selected, caption = "FEVD Results", align = "l|llll")
# Create the LaTeX table
latex_table <- xtable::xtable(fevd_df_selected, caption = "FEVD Results", align = "l|lllll")
latex_table
print(latex_table, include.rownames = TRUE, include.colnames = TRUE, hline.after = c(-1, 0, nrow(fevd_df_selected)))
write.table(latex_table, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
source("E:/french inflation/R/data.R")
library(vars)
library(svars)
library(kableExtra)
# Convert date to time series
var_data_time1 <- var_data_time[-6]
# Convert date to time series
var_data_time_ts <- ts(var_data_time1[, -1], start = c(1986, 1), frequency = 12)
# Remove rows with NAs
var_data_time_ts <- na.omit(var_data_time_ts)
# Create a VAR object
var_model <- VAR(var_data_time_ts, p = 1, type = "both")
var_model
a <- diag(1, 5)
a[lower.tri(a)] <- NA
# Create a VAR object
var_model <- VAR(var_data_time_ts, p = 1, type = "both")
# Estimate the SVAR model
svar_estimation <- SVAR(x = var_model, Amat = a, max.iter = 1000,estmethod = "direct")
summary(svar_estimation)
irf_result <- irf(svar_estimation, impulse = "Oil_Prices_log_yoy", response = c("CPI", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = FALSE)
# Alternatively, you can plot the cumulative IRF to show cumulative effects over time
cum_irf_result <- irf(svar_estimation, impulse = "Oil_Prices_log_yoy", response = c("CPI", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = FALSE, cumulative = TRUE)
# Extract IRF data
irf_data <- irf(svar_estimation, impulse = "CPI", response = c("Oil_Prices_log_yoy", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = FALSE)
# Convert IRF data to data frame
irf_df <- as.data.frame(irf_data$irf)
# Add a column for the time points (months)
irf_df$Months <- seq_len(nrow(irf_df))
# Reshape data for ggplot
irf_df_long <- tidyr::gather(irf_df, key = "Variable", value = "Elasticity", -Months)
# Plots nicely done -------------------------------------------------------
library(devtools)
source_url("https://raw.githubusercontent.com/anguyen1210/var-tools/master/R/extract_varirf.R")
fevd_result <- fevd(svar_estimation, n.ahead = 60)
# Print FEVD
print(fevd_result)
# Plot FEVD
fevd_matrix <- fevd_result$CPI
# Convert percentages to character format
fevd_matrix_percent <- sprintf("%.1f%%", fevd_matrix * 100)
if (length(rownames(fevd_matrix)) == 0) {
row_names <- paste("After", 1:nrow(fevd_matrix),"Month")
} else {
row_names <- rownames(fevd_matrix)
}
# Dynamic specification of the VAR model
optimal_lag <- VARselect(var_data_time_ts, lag.max = 10, type = "both")$selection["AIC(n)"]
var_model <- VAR(var_data_time_ts, p = optimal_lag, type = "both")
# Increase bootstrap repetitions for IRF
irf_result <- irf(svar_estimation, impulse = "Oil_Prices_log_yoy", response = c("CPI", "Interest_Rates", "Exchange_Rates", "Unemployment_Rate"), boot = TRUE, runs = 1000)
# Enhanced diagnostic checks
serial_test <- serial.test(var_model, lags.pt = optimal_lag, type = "BG")
print(serial_test)
# Enhanced visualization
ggplot(irf_df_long, aes(x = Months, y = Elasticity, color = Variable)) +
geom_line() +
labs(title = "Enhanced Impulse Response Functions",
x = "Months",
y = "Elasticity") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple")) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black")
# Increase bootstrap repetitions for FEVD
fevd_result <- fevd(svar_estimation, n.ahead = 60, boot = TRUE, runs = 1000)
# Error handling (example)
tryCatch({
# Code that might produce an error
var_model <- VAR(var_data_time_ts, p = optimal_lag, type = "both")
}, error = function(e) {
# Error handling code
cat("Error in VAR model fitting: ", e$message, "\n")
})
# Extract FEVD results
fevd_matrix <- fevd_result$CPI
# Assuming 'fevd_matrix' is a 3-dimensional array (variables x horizons x response variables)
# Convert it into a long format data frame
fevd_df <- as.data.frame(fevd_matrix, responseName = "Variable")
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
fevd_df_selected <- selected_horizons
# Use kable from knitr package to create a table
library(knitr)
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
# Create the LaTeX table
latex_table <- xtable::xtable(fevd_df_selected, caption = "FEVD Results", align = "l|lllll")
print(latex_table, include.rownames = TRUE, include.colnames = TRUE, hline.after = c(-1, 0, nrow(fevd_df_selected)))
latex_table
write.table(tab, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
latex_table
write.table(latex_table, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
latex_table <- print(latex_table, include.rownames = TRUE, include.colnames = TRUE, hline.after = c(-1, 0, nrow(fevd_df_selected)))
write.table(latex_table, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years"))
fevd_df_selected
fevd_df_selected
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter","After 6 Months", "After 1 Year", "After 5 Years")
fevd_df_selected
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 1 Month", "After 1 Quarter", "After 1 Year", "After 5 Years"))
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 1 Month","After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
latex_table <- xtable::xtable(tab, align = c("l", "c", "c", "c", "c"))
latex_table <- xtable::xtable(tab, align = c("l","c", "c", "c", "c", "c"))
tab
write.table(tab, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c( 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
colnames(fevd_df_selected) <- c("After 1 Quarter","After 6 Months", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
fevd_df_selected
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
fevd_df_selected <- selected_horizons
# Use kable from knitr package to create a table
library(knitr)
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter","After 6 Months", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
selected_horizons
selected_horizons[,-2]
selected_horizons[,-1]
selected_horizons <- selected_horizons[,-1]
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
fevd_df_selected
selected_horizons <- selected_horizons[,-1]
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
fevd_df_selected
tab <- knitr::kable(selected_horizons, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
selected_horizons
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
# Use kable from knitr package to create a table
library(knitr)
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter","After 6 Months", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
selected_horizons <- selected_horizons[,-1]
fevd_df_selected <- selected_horizons
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
tab
write.table(tab, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
selected_horizons
selected_horizons*100
selected_horizons <- paste0(round(selected_horizons*100,2),"%")
selected_horizons
selected_horizons <- paste0(round(selected_horizons*100,2),"%")
# Add time horizon as a column
selected_horizons <- fevd_df %>%
slice(c(1, 3, 6, 12, 60)) %>%
t() %>%  # Transpose the data frame
as.data.frame()
selected_horizons <- (round(selected_horizons*100,2))
selected_horizons
# Use kable from knitr package to create a table
library(knitr)
colnames(fevd_df_selected) <- c("After 1 Month", "After 1 Quarter","After 6 Months", "After 1 Year", "After 5 Years")
rownames(fevd_df_selected) <- c("Unemployment_Rate", "Inflation", "Policy_Rate", "Exchange_Rate", "Global_Oil_Prices")
selected_horizons <- selected_horizons[,-1]
fevd_df_selected <- selected_horizons
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 6 Months", "After 1 Quarter", "After 1 Year", "After 5 Years"))
write.table(tab, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
fevd_df
fevd_df %>% head()
tab <- knitr::kable(fevd_df_selected, format = "latex", col.names = c("After 3 Months", "After 6 Months", "After 1 Year", "After 5 Years"))
write.table(tab, "../tables/table2-robust.tex", sep = "&", row.names = FALSE, col.names = FALSE, quote = FALSE)
ggplot(irf_df_long, aes(x = Months, y = Elasticity, color = Variable)) +
geom_line() +
labs(title = "Effect of Variables on CPI",
x = "Months",
y = "Elasticity") +
theme_minimal() +
facet_grid(Variable ~ ., scales = "free_y")
